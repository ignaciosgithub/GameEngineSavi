#ifndef GAME_ENGINE_SAVI_GL_DEFINITIONS_H
#define GAME_ENGINE_SAVI_GL_DEFINITIONS_H

// Include standard headers
#include <cstdint>
#include "../../../../platform.h"
#include "../../../../Debugger.h"

// Only include OpenGL headers for non-Windows platforms
#ifndef PLATFORM_WINDOWS
// Define GLEW_STATIC before including glew.h
#ifndef GLEW_STATIC
#define GLEW_STATIC
#endif

// Define missing types if needed
#ifndef __gl_glext_h_
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync* GLsync;
#endif

// Define APIENTRY if not already defined
#ifndef APIENTRY
#ifdef _WIN32
#define APIENTRY __stdcall
#else
#define APIENTRY
#endif
#endif

// Define GL types needed before including glew.h
#ifndef GL_FLOAT
typedef float GLfloat;
typedef double GLdouble;
typedef int GLint;
typedef unsigned int GLuint;
typedef unsigned char GLboolean;
typedef int GLenum;
typedef unsigned int GLbitfield;
typedef int GLsizei;
typedef char GLchar;
typedef void GLvoid;
typedef ptrdiff_t GLsizeiptr;
typedef ptrdiff_t GLintptr;
typedef unsigned char GLubyte;
typedef short GLshort;
typedef unsigned short GLushort;
typedef unsigned long GLulong;
typedef float GLclampf;
typedef double GLclampd;
#endif

// Include GLEW first
bool glew_included = Debugger::GetInstance().TryExecute([]() {
    #include <GL/glew.h>
}, "gl_definitions.h", "Include GLEW");

// Then include other OpenGL headers
bool gl_included = Debugger::GetInstance().TryExecute([]() {
    #include <GL/gl.h>
}, "gl_definitions.h", "Include GL");

bool glu_included = Debugger::GetInstance().TryExecute([]() {
    #include <GL/glu.h>
}, "gl_definitions.h", "Include GLU");

bool glut_included = Debugger::GetInstance().TryExecute([]() {
    #include <GL/glut.h>
}, "gl_definitions.h", "Include GLUT");

// Define missing function pointer types with ARB/EXT suffixes
// These are needed for compatibility with GLEW
Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLCLIENTACTIVETEXTUREARBPROC
    typedef void (APIENTRY * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
    #endif
}, "gl_definitions.h", "Define PFNGLCLIENTACTIVETEXTUREARBPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLLOADTRANSPOSEMATRIXDARBPROC
    typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble m[16]);
    #endif
}, "gl_definitions.h", "Define PFNGLLOADTRANSPOSEMATRIXDARBPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLLOADTRANSPOSEMATRIXFARBPROC
    typedef void (APIENTRY * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat m[16]);
    #endif
}, "gl_definitions.h", "Define PFNGLLOADTRANSPOSEMATRIXFARBPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLMULTTRANSPOSEMATRIXDARBPROC
    typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble m[16]);
    #endif
}, "gl_definitions.h", "Define PFNGLMULTTRANSPOSEMATRIXDARBPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLMULTTRANSPOSEMATRIXFARBPROC
    typedef void (APIENTRY * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat m[16]);
    #endif
}, "gl_definitions.h", "Define PFNGLMULTTRANSPOSEMATRIXFARBPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLCONVOLUTIONPARAMETERFEXTPROC
    typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
    #endif
}, "gl_definitions.h", "Define PFNGLCONVOLUTIONPARAMETERFEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLCONVOLUTIONPARAMETERFVEXTPROC
    typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
    #endif
}, "gl_definitions.h", "Define PFNGLCONVOLUTIONPARAMETERFVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLCONVOLUTIONPARAMETERIEXTPROC
    typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
    #endif
}, "gl_definitions.h", "Define PFNGLCONVOLUTIONPARAMETERIEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLCONVOLUTIONPARAMETERIVEXTPROC
    typedef void (APIENTRY * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
    #endif
}, "gl_definitions.h", "Define PFNGLCONVOLUTIONPARAMETERIVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLGETHISTOGRAMPARAMETERFVEXTPROC
    typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
    #endif
}, "gl_definitions.h", "Define PFNGLGETHISTOGRAMPARAMETERFVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLGETHISTOGRAMPARAMETERIVEXTPROC
    typedef void (APIENTRY * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
    #endif
}, "gl_definitions.h", "Define PFNGLGETHISTOGRAMPARAMETERIVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLGETMINMAXPARAMETERFVEXTPROC
    typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
    #endif
}, "gl_definitions.h", "Define PFNGLGETMINMAXPARAMETERFVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLGETMINMAXPARAMETERIVEXTPROC
    typedef void (APIENTRY * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
    #endif
}, "gl_definitions.h", "Define PFNGLGETMINMAXPARAMETERIVEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLHISTOGRAMEXTPROC
    typedef void (APIENTRY * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
    #endif
}, "gl_definitions.h", "Define PFNGLHISTOGRAMEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLMINMAXEXTPROC
    typedef void (APIENTRY * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
    #endif
}, "gl_definitions.h", "Define PFNGLMINMAXEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLRESETHISTOGRAMEXTPROC
    typedef void (APIENTRY * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
    #endif
}, "gl_definitions.h", "Define PFNGLRESETHISTOGRAMEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLRESETMINMAXEXTPROC
    typedef void (APIENTRY * PFNGLRESETMINMAXEXTPROC) (GLenum target);
    #endif
}, "gl_definitions.h", "Define PFNGLRESETMINMAXEXTPROC");

Debugger::GetInstance().TryExecute([]() {
    #ifndef PFNGLSEPARABLEFILTER2DEXTPROC
    typedef void (APIENTRY * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);
    #endif
}, "gl_definitions.h", "Define PFNGLSEPARABLEFILTER2DEXTPROC");

#else
// Windows-specific DirectX headers are included in DirectXGraphicsAPI.h
#endif

#endif // GAME_ENGINE_SAVI_GL_DEFINITIONS_H
