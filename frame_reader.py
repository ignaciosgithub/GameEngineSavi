#!/usr/bin/env python3
"""
Frame Reader for GameEngineSavi Enhanced Emergency Editor

This script reads frames generated by the Enhanced Emergency Editor and displays
them in sequence using pygame. It also displays panel information and hotkey state.
"""

import os
import sys
import time
import pygame
import glob
from pygame.locals import QUIT, KEYDOWN, K_ESCAPE, K_SPACE, K_LEFT, K_RIGHT

# Constants
WINDOW_WIDTH = 1280
WINDOW_HEIGHT = 720
FPS = 30
FRAME_DELAY = 1.0 / FPS

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GRAY = (128, 128, 128)

def load_frames(frames_dir="frames"):
    """Load all frames from the frames directory."""
    frames = []
    frame_files = sorted(glob.glob(os.path.join(frames_dir, "frame*.png")))
    
    for frame_file in frame_files:
        try:
            frame = pygame.image.load(frame_file)
            frames.append(frame)
        except pygame.error as e:
            print(f"Error loading frame {frame_file}: {e}")
    
    return frames

def load_panel_info(frames_dir="frames"):
    """Load panel information from the panel_info.txt file."""
    panel_info = {"Active Panel": 0, "Panel Name": "Scene View Panel"}
    
    panel_info_file = os.path.join(frames_dir, "panel_info.txt")
    if os.path.exists(panel_info_file):
        try:
            with open(panel_info_file, "r") as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if line.startswith("Active Panel:"):
                        panel_info["Active Panel"] = int(line.split(":")[1].strip())
                    elif line:
                        panel_info["Panel Name"] = line
        except Exception as e:
            print(f"Error loading panel info: {e}")
    
    return panel_info

def load_hotkey_state(frames_dir="frames"):
    """Load hotkey state from the hotkey_state.txt file."""
    hotkey_state = {}
    
    hotkey_state_file = os.path.join(frames_dir, "hotkey_state.txt")
    if os.path.exists(hotkey_state_file):
        try:
            with open(hotkey_state_file, "r") as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if ":" in line:
                        key, value = line.split(":", 1)
                        hotkey_state[key.strip()] = value.strip()
        except Exception as e:
            print(f"Error loading hotkey state: {e}")
    
    return hotkey_state

def draw_panel_overlay(surface, panel_info):
    """Draw panel overlay on the surface."""
    # Draw panel borders
    pygame.draw.rect(surface, WHITE, (0, 0, 200, WINDOW_HEIGHT), 2)  # Hierarchy panel
    pygame.draw.rect(surface, WHITE, (WINDOW_WIDTH - 300, 0, 300, WINDOW_HEIGHT), 2)  # Inspector panel
    pygame.draw.rect(surface, WHITE, (200, WINDOW_HEIGHT - 200, WINDOW_WIDTH - 500, 200), 2)  # Project panel
    
    # Draw panel names
    font = pygame.font.Font(None, 24)
    
    # Hierarchy panel
    text = font.render("Hierarchy Panel", True, WHITE)
    surface.blit(text, (10, 10))
    
    # Inspector panel
    text = font.render("Inspector Panel", True, WHITE)
    surface.blit(text, (WINDOW_WIDTH - 290, 10))
    
    # Project panel
    text = font.render("Project Panel", True, WHITE)
    surface.blit(text, (210, WINDOW_HEIGHT - 190))
    
    # Scene view panel
    text = font.render("Scene View Panel", True, WHITE)
    surface.blit(text, (210, 10))
    
    # Highlight active panel
    active_panel = panel_info["Active Panel"]
    if active_panel == 0:  # Hierarchy panel
        pygame.draw.rect(surface, GREEN, (0, 0, 200, 30), 2)
    elif active_panel == 1:  # Scene view panel
        pygame.draw.rect(surface, GREEN, (200, 0, WINDOW_WIDTH - 500, 30), 2)
    elif active_panel == 2:  # Inspector panel
        pygame.draw.rect(surface, GREEN, (WINDOW_WIDTH - 300, 0, 300, 30), 2)
    elif active_panel == 3:  # Project panel
        pygame.draw.rect(surface, GREEN, (200, WINDOW_HEIGHT - 200, WINDOW_WIDTH - 500, 30), 2)

def draw_hotkey_info(surface, hotkey_state):
    """Draw hotkey information on the surface."""
    if not hotkey_state:
        return
    
    font = pygame.font.Font(None, 20)
    y_pos = 40
    
    # Draw hotkey state
    text = font.render("Hotkey State:", True, WHITE)
    surface.blit(text, (WINDOW_WIDTH - 290, y_pos))
    y_pos += 25
    
    for key, value in hotkey_state.items():
        text = font.render(f"{key}: {value}", True, WHITE)
        surface.blit(text, (WINDOW_WIDTH - 290, y_pos))
        y_pos += 20

def draw_help_text(surface):
    """Draw help text on the surface."""
    font = pygame.font.Font(None, 20)
    
    # Draw help text
    text = font.render("Controls:", True, WHITE)
    surface.blit(text, (10, WINDOW_HEIGHT - 100))
    
    text = font.render("Space: Play/Pause", True, WHITE)
    surface.blit(text, (10, WINDOW_HEIGHT - 80))
    
    text = font.render("Left/Right: Previous/Next Frame", True, WHITE)
    surface.blit(text, (10, WINDOW_HEIGHT - 60))
    
    text = font.render("Esc: Quit", True, WHITE)
    surface.blit(text, (10, WINDOW_HEIGHT - 40))

def main():
    """Main function."""
    # Initialize pygame
    pygame.init()
    
    # Create window
    window = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
    pygame.display.set_caption("GameEngineSavi Frame Reader")
    
    # Load frames
    frames = load_frames()
    if not frames:
        print("No frames found in the frames directory.")
        pygame.quit()
        return
    
    # Load panel info and hotkey state
    panel_info = load_panel_info()
    hotkey_state = load_hotkey_state()
    
    # Initialize variables
    clock = pygame.time.Clock()
    running = True
    playing = True
    current_frame = 0
    last_frame_time = time.time()
    
    # Main loop
    while running:
        # Handle events
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            elif event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    running = False
                elif event.key == K_SPACE:
                    playing = not playing
                elif event.key == K_LEFT:
                    current_frame = max(0, current_frame - 1)
                    last_frame_time = time.time()
                elif event.key == K_RIGHT:
                    current_frame = min(len(frames) - 1, current_frame + 1)
                    last_frame_time = time.time()
        
        # Update frame if playing
        if playing and time.time() - last_frame_time >= FRAME_DELAY:
            current_frame = (current_frame + 1) % len(frames)
            last_frame_time = time.time()
        
        # Draw frame
        window.fill(BLACK)
        
        # Draw current frame
        frame = frames[current_frame]
        window.blit(frame, (0, 0))
        
        # Draw panel overlay
        draw_panel_overlay(window, panel_info)
        
        # Draw hotkey info
        draw_hotkey_info(window, hotkey_state)
        
        # Draw help text
        draw_help_text(window)
        
        # Draw frame counter
        font = pygame.font.Font(None, 24)
        text = font.render(f"Frame: {current_frame + 1}/{len(frames)}", True, WHITE)
        window.blit(text, (WINDOW_WIDTH - 150, WINDOW_HEIGHT - 30))
        
        # Draw play/pause indicator
        text = font.render("Playing" if playing else "Paused", True, GREEN if playing else RED)
        window.blit(text, (WINDOW_WIDTH - 150, WINDOW_HEIGHT - 60))
        
        # Update display
        pygame.display.flip()
        
        # Cap framerate
        clock.tick(FPS)
    
    # Clean up
    pygame.quit()

if __name__ == "__main__":
    main()
